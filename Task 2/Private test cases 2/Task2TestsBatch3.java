package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch3 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#b;d;m#0,b,8;0,b,5;0,b,2;0,b,3;0,b,1;0,b,6;0,d,5;0,d,1;0,d,0;0,d,3;0,d,6;0,m,6;0,m,9;0,m,3;0,m,1;0,m,8;1,b,9;1,b,7;1,b,6;1,b,3;1,b,2;1,b,0;1,d,8;1,d,4;1,d,1;1,d,2;1,d,7;1,d,9;1,d,0;1,m,3;1,m,4;1,m,9;1,m,5;1,m,1;2,b,8;2,b,1;2,b,4;2,b,2;2,d,2;2,d,9;2,d,8;2,d,3;2,d,5;2,m,8;2,m,9;2,m,5;2,m,0;2,m,4;2,m,6;3,b,2;3,b,3;3,b,8;3,b,4;3,b,6;3,b,5;3,d,6;3,d,4;3,d,5;3,d,0;3,m,3;3,m,9;3,m,1;3,m,7;3,m,4;3,m,2;4,b,5;4,b,1;4,b,7;4,b,4;4,b,2;4,b,3;4,b,9;4,d,0;4,d,1;4,d,6;4,d,9;4,d,8;4,d,2;4,d,7;4,m,5;4,m,0;4,m,2;4,m,3;4,m,6;4,m,9;5,b,8;5,b,1;5,b,0;5,b,5;5,d,9;5,d,5;5,d,7;5,d,4;5,d,8;5,d,6;5,d,2;5,m,8;5,m,9;5,m,1;5,m,3;6,b,6;6,b,4;6,b,5;6,b,7;6,b,0;6,d,8;6,d,7;6,d,1;6,d,9;6,d,5;6,d,0;6,d,3;6,m,0;6,m,3;6,m,5;6,m,9;6,m,6;7,b,7;7,b,9;7,b,5;7,b,8;7,b,0;7,b,1;7,d,3;7,d,8;7,d,1;7,d,5;7,d,6;7,d,4;7,m,2;7,m,8;7,m,7;7,m,6;7,m,1;7,m,9;8,b,1;8,b,0;8,b,3;8,b,8;8,b,6;8,b,5;8,d,9;8,d,0;8,d,4;8,d,3;8,d,1;8,d,2;8,d,5;8,m,8;8,m,2;8,m,7;8,m,0;8,m,5;9,b,9;9,b,5;9,b,3;9,b,0;9,d,8;9,d,3;9,d,7;9,d,9;9,d,5;9,d,6;9,m,5;9,m,2;9,m,4;9,m,0#6#0;1;6;8");
		assertEquals("0/1/2/3/4/5/6/7/8/9;0/1/2/3/5/6/7/8/9;0/1/3/5/7/8/9;0/3/5/6/9;0/4/5/6/7;6#b;d;m#0/1/2/3/4/5/6/7/8/9,b,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,m,0/1/2/3/4/5/6/7/8/9;0/1/2/3/5/6/7/8/9,b,0/1/2/3/4/5/6/7/8/9;0/1/2/3/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/2/3/5/6/7/8/9,m,0/1/2/3/4/5/6/7/8/9;0/1/3/5/7/8/9,b,0/1/2/3/4/5/6/7/8/9;0/1/3/5/7/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/3/5/7/8/9,m,0/1/2/3/4/5/6/7/8/9;0/3/5/6/9,b,0/1/2/3/4/5/6/7/8/9;0/3/5/6/9,d,0/1/2/3/4/5/6/7/8/9;0/3/5/6/9,m,0/1/2/3/4/5/6/7/8/9;0/4/5/6/7,b,0/1/2/3/4/5/6/7/8/9;0/4/5/6/7,d,0/1/2/3/4/5/6/7/8/9;0/4/5/6/7,m,0/1/2/3/5/6/7/8/9;6,b,0/4/5/6/7;6,d,0/1/3/5/7/8/9;6,m,0/3/5/6/9#6#0/1/2/3/4/5/6/7/8/9;0/1/2/3/5/6/7/8/9;0/1/3/5/7/8/9;0/3/5/6/9;0/4/5/6/7;6", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#m;o;p;y;z#0,m,1;1,e,5;2,y,3;3,e,5;4,e,0;4,e,2;5,e,6;5,e,8;6,o,7;7,e,10;8,z,9;9,e,10;10,p,11#4#11");
		assertEquals("-1;0/2/4;1/5/6/8;3/5/6/8;7/10;9/10;11#m;o;p;y;z#-1,m,-1;-1,o,-1;-1,p,-1;-1,y,-1;-1,z,-1;0/2/4,m,1/5/6/8;0/2/4,o,-1;0/2/4,p,-1;0/2/4,y,3/5/6/8;0/2/4,z,-1;1/5/6/8,m,-1;1/5/6/8,o,7/10;1/5/6/8,p,-1;1/5/6/8,y,-1;1/5/6/8,z,9/10;3/5/6/8,m,-1;3/5/6/8,o,7/10;3/5/6/8,p,-1;3/5/6/8,y,-1;3/5/6/8,z,9/10;7/10,m,-1;7/10,o,-1;7/10,p,11;7/10,y,-1;7/10,z,-1;9/10,m,-1;9/10,o,-1;9/10,p,11;9/10,y,-1;9/10,z,-1;11,m,-1;11,o,-1;11,p,-1;11,y,-1;11,z,-1#0/2/4#11", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#q;v#0,q,0;0,q,6;0,q,2;0,q,1;0,v,5;0,v,3;0,v,2;0,v,8;0,v,9;0,v,7;1,q,1;1,q,9;1,q,6;1,q,5;1,v,4;1,v,8;1,v,2;1,v,5;1,v,7;2,q,7;2,q,0;2,q,5;2,q,1;2,q,4;2,q,3;2,v,0;2,v,7;2,v,5;2,v,2;2,v,8;2,v,1;2,v,3;3,q,5;3,q,1;3,q,3;3,q,4;3,v,7;3,v,4;3,v,2;3,v,5;3,v,0;3,v,8;4,q,6;4,q,1;4,q,5;4,q,2;4,v,6;4,v,2;4,v,9;4,v,8;4,v,1;4,v,5;4,v,7;5,q,2;5,q,8;5,q,0;5,q,7;5,q,4;5,q,5;5,v,7;5,v,1;5,v,3;5,v,2;5,v,5;5,v,0;5,v,9;6,q,9;6,q,1;6,q,3;6,q,8;6,v,4;6,v,8;6,v,6;6,v,3;6,v,2;7,q,9;7,q,7;7,q,3;7,q,1;7,q,8;7,v,9;7,v,4;7,v,8;7,v,5;7,v,3;7,v,6;7,v,0;8,q,3;8,q,9;8,q,4;8,q,7;8,q,6;8,q,0;8,q,8;8,v,5;8,v,1;8,v,4;8,v,6;8,v,0;8,v,8;8,v,9;9,q,4;9,q,8;9,q,3;9,q,5;9,q,7;9,v,1;9,v,9;9,v,7;9,v,0;9,v,8;9,v,3#0#0;1;4;8");
		assertEquals("0;0/1/2/3/4/5/6/7/8/9;0/1/2/6;2/3/5/7/8/9#q;v#0,q,0/1/2/6;0,v,2/3/5/7/8/9;0/1/2/3/4/5/6/7/8/9,q,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,v,0/1/2/3/4/5/6/7/8/9;0/1/2/6,q,0/1/2/3/4/5/6/7/8/9;0/1/2/6,v,0/1/2/3/4/5/6/7/8/9;2/3/5/7/8/9,q,0/1/2/3/4/5/6/7/8/9;2/3/5/7/8/9,v,0/1/2/3/4/5/6/7/8/9#0#0;0/1/2/3/4/5/6/7/8/9;0/1/2/6;2/3/5/7/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#a;d;f#0,a,4;0,a,3;0,a,2;0,a,5;0,a,8;0,a,1;0,d,4;0,d,7;0,d,1;0,d,5;0,d,2;0,d,3;0,d,0;0,f,3;0,f,0;0,f,1;0,f,2;0,f,7;0,f,9;1,a,5;1,a,8;1,a,6;1,a,4;1,a,2;1,a,7;1,d,8;1,d,1;1,d,3;1,d,5;1,d,9;1,d,0;1,f,3;1,f,1;1,f,4;1,f,0;1,f,2;1,f,8;1,f,7;2,a,6;2,a,5;2,a,0;2,a,3;2,a,9;2,a,8;2,d,1;2,d,6;2,d,9;2,d,5;2,d,8;2,d,2;2,f,4;2,f,5;2,f,2;2,f,8;2,f,1;3,a,2;3,a,4;3,a,7;3,a,8;3,a,5;3,a,6;3,a,9;3,d,1;3,d,6;3,d,9;3,d,5;3,d,4;3,d,2;3,f,1;3,f,5;3,f,8;3,f,6;3,f,3;4,a,7;4,a,2;4,a,1;4,a,5;4,a,4;4,a,0;4,d,0;4,d,2;4,d,6;4,d,9;4,d,1;4,f,6;4,f,5;4,f,7;4,f,2;4,f,1;5,a,8;5,a,2;5,a,6;5,a,5;5,a,1;5,a,4;5,d,8;5,d,2;5,d,0;5,d,7;5,d,4;5,d,3;5,d,1;5,f,4;5,f,7;5,f,2;5,f,3;5,f,6;5,f,1;6,a,7;6,a,6;6,a,2;6,a,9;6,a,5;6,d,7;6,d,6;6,d,3;6,d,5;6,f,5;6,f,6;6,f,2;6,f,0;6,f,7;7,a,8;7,a,6;7,a,1;7,a,9;7,d,6;7,d,0;7,d,5;7,d,8;7,d,7;7,d,3;7,d,4;7,f,4;7,f,7;7,f,6;7,f,9;7,f,1;8,a,8;8,a,5;8,a,0;8,a,2;8,a,7;8,a,1;8,d,0;8,d,8;8,d,5;8,d,4;8,d,3;8,d,7;8,d,6;8,f,4;8,f,0;8,f,5;8,f,9;9,a,0;9,a,7;9,a,3;9,a,6;9,a,4;9,a,2;9,d,6;9,d,4;9,d,1;9,d,9;9,f,7;9,f,2;9,f,8;9,f,1;9,f,5;9,f,6;9,f,9#9#1;2;4;7;9");
		assertEquals("0/1/2/3/4/5/6/7/8/9;0/2/3/4/6/7;1/2/5/6/7/8/9;1/4/6/9;9#a;d;f#0/1/2/3/4/5/6/7/8/9,a,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,f,0/1/2/3/4/5/6/7/8/9;0/2/3/4/6/7,a,0/1/2/3/4/5/6/7/8/9;0/2/3/4/6/7,d,0/1/2/3/4/5/6/7/8/9;0/2/3/4/6/7,f,0/1/2/3/4/5/6/7/8/9;1/2/5/6/7/8/9,a,0/1/2/3/4/5/6/7/8/9;1/2/5/6/7/8/9,d,0/1/2/3/4/5/6/7/8/9;1/2/5/6/7/8/9,f,0/1/2/3/4/5/6/7/8/9;1/4/6/9,a,0/1/2/3/4/5/6/7/8/9;1/4/6/9,d,0/1/2/3/4/5/6/7/8/9;1/4/6/9,f,0/1/2/3/4/5/6/7/8/9;9,a,0/2/3/4/6/7;9,d,1/4/6/9;9,f,1/2/5/6/7/8/9#9#0/1/2/3/4/5/6/7/8/9;0/2/3/4/6/7;1/2/5/6/7/8/9;1/4/6/9;9", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#b;c;v;y#0,b,1;1,e,0;1,e,3;2,e,0;2,e,3;3,e,10;4,v,5;5,e,4;5,e,7;6,e,4;6,e,7;7,y,8;8,e,10;9,e,2;9,e,6;10,c,11#9#11");
		assertEquals("-1;0/1/3/10;0/2/3/4/6/7/9/10;4/5/7;8/10;11#b;c;v;y#-1,b,-1;-1,c,-1;-1,v,-1;-1,y,-1;0/1/3/10,b,0/1/3/10;0/1/3/10,c,11;0/1/3/10,v,-1;0/1/3/10,y,-1;0/2/3/4/6/7/9/10,b,0/1/3/10;0/2/3/4/6/7/9/10,c,11;0/2/3/4/6/7/9/10,v,4/5/7;0/2/3/4/6/7/9/10,y,8/10;4/5/7,b,-1;4/5/7,c,-1;4/5/7,v,4/5/7;4/5/7,y,8/10;8/10,b,-1;8/10,c,11;8/10,v,-1;8/10,y,-1;11,b,-1;11,c,-1;11,v,-1;11,y,-1#0/2/3/4/6/7/9/10#11", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#k;s#0,k,4;0,k,5;0,k,2;0,k,7;0,k,0;0,k,1;0,s,6;0,s,7;0,s,1;0,s,3;0,s,5;0,s,2;0,s,0;1,k,2;1,k,7;1,k,3;1,k,1;1,k,5;1,k,6;1,s,4;1,s,1;1,s,2;1,s,6;1,s,3;2,k,3;2,k,7;2,k,0;2,k,2;2,s,0;2,s,4;2,s,3;2,s,6;2,s,1;2,s,5;2,s,2;3,k,1;3,k,7;3,k,6;3,k,0;3,k,3;3,k,5;3,k,2;3,s,6;3,s,4;3,s,3;3,s,0;3,s,1;3,s,7;4,k,1;4,k,5;4,k,6;4,k,7;4,s,6;4,s,4;4,s,3;4,s,0;4,s,5;5,k,0;5,k,7;5,k,2;5,k,3;5,k,1;5,k,6;5,k,4;5,s,3;5,s,0;5,s,6;5,s,7;6,k,0;6,k,5;6,k,6;6,k,7;6,k,3;6,k,4;6,k,2;6,s,5;6,s,2;6,s,6;6,s,0;6,s,7;6,s,4;7,k,1;7,k,4;7,k,6;7,k,3;7,k,7;7,s,1;7,s,6;7,s,0;7,s,3;7,s,7;7,s,2#5#0;1;3");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/3/4/6/7;0/3/6/7;5#k;s#0/1/2/3/4/5/6/7,k,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,s,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,k,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,s,0/1/2/3/4/5/6/7;0/3/6/7,k,0/1/2/3/4/5/6/7;0/3/6/7,s,0/1/2/3/4/5/6/7;5,k,0/1/2/3/4/6/7;5,s,0/3/6/7#5#0/1/2/3/4/5/6/7;0/1/2/3/4/6/7;0/3/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#a;q#0,a,1;1,a,2;2,e,0;2,e,4;3,e,0;3,e,4;4,e,3;4,e,6;5,e,3;5,e,6;6,e,7;6,e,9;7,q,8;8,e,7;8,e,9#5#9");
		assertEquals("-1;0/2/3/4/6/7/9;0/3/4/5/6/7/9;1;7/8/9#a;q#-1,a,-1;-1,q,-1;0/2/3/4/6/7/9,a,1;0/2/3/4/6/7/9,q,7/8/9;0/3/4/5/6/7/9,a,1;0/3/4/5/6/7/9,q,7/8/9;1,a,0/2/3/4/6/7/9;1,q,-1;7/8/9,a,-1;7/8/9,q,7/8/9#0/3/4/5/6/7/9#0/2/3/4/6/7/9;0/3/4/5/6/7/9;7/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#d;g#0,d,3;0,d,11;0,d,10;0,d,0;0,d,6;0,d,7;0,d,2;0,g,3;0,g,6;0,g,4;0,g,7;0,g,11;1,d,7;1,d,5;1,d,1;1,d,10;1,d,4;1,d,0;1,d,2;1,g,0;1,g,5;1,g,4;1,g,1;1,g,11;1,g,9;2,d,4;2,d,6;2,d,5;2,d,9;2,g,0;2,g,7;2,g,6;2,g,11;3,d,5;3,d,0;3,d,4;3,d,3;3,d,7;3,d,9;3,d,6;3,g,2;3,g,10;3,g,0;3,g,4;3,g,6;4,d,2;4,d,3;4,d,5;4,d,1;4,d,7;4,g,11;4,g,7;4,g,8;4,g,0;4,g,1;4,g,3;5,d,7;5,d,11;5,d,0;5,d,2;5,d,6;5,d,9;5,d,5;5,g,10;5,g,8;5,g,1;5,g,6;5,g,5;5,g,3;5,g,11;6,d,3;6,d,8;6,d,10;6,d,0;6,g,3;6,g,0;6,g,5;6,g,7;6,g,9;7,d,2;7,d,11;7,d,4;7,d,5;7,d,8;7,d,3;7,d,6;7,g,1;7,g,2;7,g,11;7,g,7;7,g,9;7,g,8;7,g,5;8,d,3;8,d,7;8,d,0;8,d,2;8,d,8;8,d,1;8,g,2;8,g,7;8,g,6;8,g,3;9,d,8;9,d,9;9,d,7;9,d,10;9,d,0;9,d,11;9,d,1;9,g,11;9,g,2;9,g,7;9,g,4;9,g,1;9,g,9;10,d,6;10,d,4;10,d,2;10,d,7;10,d,11;10,d,1;10,g,11;10,g,2;10,g,1;10,g,9;10,g,10;11,d,4;11,d,11;11,d,10;11,d,9;11,d,8;11,d,5;11,g,8;11,g,0;11,g,7;11,g,10;11,g,4;11,g,11;11,g,9#2#0;7;10;11");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/6/7/8/9/10/11;0/2/3/4/5/6/7/8/9/10/11;0/6/7/11;2;4/5/6/9#d;g#0/1/2/3/4/5/6/7/8/9/10/11,d,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,g,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/6/7/8/9/10/11,d,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/6/7/8/9/10/11,g,0/1/2/3/4/5/6/7/8/9/10/11;0/2/3/4/5/6/7/8/9/10/11,d,0/1/2/3/4/5/6/7/8/9/10/11;0/2/3/4/5/6/7/8/9/10/11,g,0/1/2/3/4/5/6/7/8/9/10/11;0/6/7/11,d,0/2/3/4/5/6/7/8/9/10/11;0/6/7/11,g,0/1/2/3/4/5/6/7/8/9/10/11;2,d,4/5/6/9;2,g,0/6/7/11;4/5/6/9,d,0/1/2/3/5/6/7/8/9/10/11;4/5/6/9,g,0/1/2/3/4/5/6/7/8/9/10/11#2#0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/6/7/8/9/10/11;0/2/3/4/5/6/7/8/9/10/11;0/6/7/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#a;d;q;t#0,q,1;1,e,2;1,e,9;2,d,3;3,a,4;4,e,11;5,d,6;6,e,10;7,t,8;8,e,10;9,e,5;9,e,7;10,e,11#0#11");
		assertEquals("-1;0;1/2/5/7/9;3/6/10/11;4/11;8/10/11#a;d;q;t#-1,a,-1;-1,d,-1;-1,q,-1;-1,t,-1;0,a,-1;0,d,-1;0,q,1/2/5/7/9;0,t,-1;1/2/5/7/9,a,-1;1/2/5/7/9,d,3/6/10/11;1/2/5/7/9,q,-1;1/2/5/7/9,t,8/10/11;3/6/10/11,a,4/11;3/6/10/11,d,-1;3/6/10/11,q,-1;3/6/10/11,t,-1;4/11,a,-1;4/11,d,-1;4/11,q,-1;4/11,t,-1;8/10/11,a,-1;8/10/11,d,-1;8/10/11,q,-1;8/10/11,t,-1#0#3/6/10/11;4/11;8/10/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6#m;p;x#0,p,1;1,x,2;2,m,3;3,e,4;3,e,6;4,x,5;5,e,4;5,e,6#0#6");
		assertEquals("-1;0;1;2;3/4/6;4/5/6#m;p;x#-1,m,-1;-1,p,-1;-1,x,-1;0,m,-1;0,p,1;0,x,-1;1,m,-1;1,p,-1;1,x,2;2,m,3/4/6;2,p,-1;2,x,-1;3/4/6,m,-1;3/4/6,p,-1;3/4/6,x,4/5/6;4/5/6,m,-1;4/5/6,p,-1;4/5/6,x,4/5/6#0#3/4/6;4/5/6", nfaToDfa.toString());
	}

}